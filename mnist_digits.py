# -*- coding: utf-8 -*-
"""MNIST Digits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1il_yHb46NDTy8XZSpxWdJ5IhuNkMV4LS
"""

import tensorflow

tensorflow.__version__

from tensorflow import keras
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

i = 100
import matplotlib.pyplot as plt
plt.imshow(x_train[i],cmap='gray')
print(y_train[i])
plt.show()

# Normalization
x_train = x_train/255
x_test = x_test/255

x_train[0]

# Neural Network Architecture
# Compile the model
# Fit the model
# Predict and Evaluate
# Canvas

x_train.shape

model = keras.Sequential()
model.add(keras.layers.Flatten(input_shape=(28,28))) # Input Layer
model.add(keras.layers.Dense(512,activation='relu')) # Hidden layer
model.add(keras.layers.Dense(10,activation='softmax')) # Output layer

model.summary()

# Number of neurosn in the previous layer * Number of neuron in present layer + no of bias value
(784*512)+512

(512*10)+10

# Compile
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

# Training the model
history = model.fit(x_train,y_train,epochs=3)

i = 2
import matplotlib.pyplot as plt
plt.imshow(x_test[i],cmap='gray')
#print(y_train[i])
plt.show()

y_pred = model.predict(x_test)
y_pred = np.argmax(y_pred,axis=1)# Index with highest value
y_pred

# y_test is the variable which has real output
y_test

import numpy as np
np.unique(y_test,return_counts=True)

from sklearn.metrics import confusion_matrix,accuracy_score
confusion_matrix(y_pred,y_test)

accuracy_score(y_pred,y_test)

model.save('digit.h5') # saving the weights and bias values

!pip install streamlit==0.83.0 --quiet
!pip install streamlit-drawable-canvas --quiet
!pip install pyngrok==4.1.1 --quiet
from pyngrok import ngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from streamlit_drawable_canvas import st_canvas
# import cv2
# import numpy as np
# from tensorflow import keras
# 
# model = keras.models.load_model('digit.h5')
# 
# st.write("Original Image")
# canvas_result = st_canvas(stroke_width=20,stroke_color='k',background_color='white',height=200,width=200)
# 
# img = cv2.resize(canvas_result.image_data.astype('uint8'),(28,28)) # 0 to 255
# img = cv2.resize(img,(28,28))
# st.image(img)
# 
# if st.button('PREDICT'):
#   test = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
#   test = np.expand_dims(test,axis=0)
#   op = model.predict(test)
#   op = np.argmax(op[0])
#   st.title(op)

!nohup streamlit run app.py &
url = ngrok.connect(port='8501')
url

